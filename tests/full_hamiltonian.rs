use exact_diagonalization::states::{SimpleState, bit_fns::bit_flip};
use exact_diagonalization::error::Error;
use ndarray::{Array2, arr2};

#[test]
fn test_full_hamiltonian() -> Result<(), Error> {
    let total_ptl = 4;
    let max_state = 1 << total_ptl;
    let mut hamiltonian = Array2::<f64>::zeros((max_state, max_state));
    let delta = 2f64;
    let t = 2f64 * delta;

    for state in 0..max_state {
        let iterator = SimpleState::new(state, total_ptl);
        for ((i,si), (j, sj)) in iterator.periodic_pair_enumerate() {
            if si == sj {
                hamiltonian[[state, state]] -= delta / 2f64;
            } else {
                hamiltonian[[state, state]] += delta / 2f64;

                let state2: usize = bit_flip(state, total_ptl, i, j)?;
                hamiltonian[[state, state2]] -= 1f64;
            }
        }
    }

    assert_eq!(hamiltonian,
        arr2(&[[   -t,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
               [  0.0, -1.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0, -1.0,  0.0,    t, -1.0,  0.0,  0.0, -1.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0, -1.0,  0.0],
               [  0.0, -1.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0, -1.0,  0.0,  0.0, -1.0,  0.0,  0.0, -1.0,    t,  0.0, -1.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0, -1.0,  0.0],
               [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0,  0.0,  0.0,  0.0, -1.0,  0.0,  0.0],
               [  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   -t]]));
    return Ok(());
}
